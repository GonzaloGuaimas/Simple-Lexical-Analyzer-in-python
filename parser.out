Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> S
Rule 1     S -> PROC IDENT PAREN P PAREN
Rule 2     P -> VAR P
Rule 3     P -> CONST P
Rule 4     P -> empty
Rule 5     empty -> <empty>

Terminals, with rules where they appear

CONST                : 3
IDENT                : 1
PAREN                : 1 1
PROC                 : 1
VAR                  : 2
error                : 

Nonterminals, with rules where they appear

P                    : 1 2 3
S                    : 0
empty                : 4

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . PROC IDENT PAREN P PAREN

    PROC            shift and go to state 2

    S                              shift and go to state 1

state 1

    (0) S' -> S .



state 2

    (1) S -> PROC . IDENT PAREN P PAREN

    IDENT           shift and go to state 3


state 3

    (1) S -> PROC IDENT . PAREN P PAREN

    PAREN           shift and go to state 4


state 4

    (1) S -> PROC IDENT PAREN . P PAREN
    (2) P -> . VAR P
    (3) P -> . CONST P
    (4) P -> . empty
    (5) empty -> .

    VAR             shift and go to state 6
    CONST           shift and go to state 7
    PAREN           reduce using rule 5 (empty -> .)

    P                              shift and go to state 5
    empty                          shift and go to state 8

state 5

    (1) S -> PROC IDENT PAREN P . PAREN

    PAREN           shift and go to state 9


state 6

    (2) P -> VAR . P
    (2) P -> . VAR P
    (3) P -> . CONST P
    (4) P -> . empty
    (5) empty -> .

    VAR             shift and go to state 6
    CONST           shift and go to state 7
    PAREN           reduce using rule 5 (empty -> .)

    P                              shift and go to state 10
    empty                          shift and go to state 8

state 7

    (3) P -> CONST . P
    (2) P -> . VAR P
    (3) P -> . CONST P
    (4) P -> . empty
    (5) empty -> .

    VAR             shift and go to state 6
    CONST           shift and go to state 7
    PAREN           reduce using rule 5 (empty -> .)

    P                              shift and go to state 11
    empty                          shift and go to state 8

state 8

    (4) P -> empty .

    PAREN           reduce using rule 4 (P -> empty .)


state 9

    (1) S -> PROC IDENT PAREN P PAREN .

    $end            reduce using rule 1 (S -> PROC IDENT PAREN P PAREN .)


state 10

    (2) P -> VAR P .

    PAREN           reduce using rule 2 (P -> VAR P .)


state 11

    (3) P -> CONST P .

    PAREN           reduce using rule 3 (P -> CONST P .)

