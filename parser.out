Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> S
Rule 1     S -> TAG_HTML H B TAG_HTML
Rule 2     H -> TAG_HEAD T TAG_HEAD
Rule 3     T -> TAG_TITLE L TAG_TITLE
Rule 4     B -> TAG_BODY P
Rule 5     P -> TAG_P L C TAG_HR TAG_P
Rule 6     C -> TAG_B L TAG_B
Rule 7     L -> TEXT
Rule 8     L -> empty
Rule 9     empty -> <empty>

Terminals, with rules where they appear

TAG_B                : 6 6
TAG_BODY             : 4
TAG_HEAD             : 2 2
TAG_HR               : 5
TAG_HTML             : 1 1
TAG_P                : 5 5
TAG_TITLE            : 3 3
TEXT                 : 7
error                : 

Nonterminals, with rules where they appear

B                    : 1
C                    : 5
H                    : 1
L                    : 3 5 6
P                    : 4
S                    : 0
T                    : 2
empty                : 8

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . TAG_HTML H B TAG_HTML

    TAG_HTML        shift and go to state 2

    S                              shift and go to state 1

state 1

    (0) S' -> S .



state 2

    (1) S -> TAG_HTML . H B TAG_HTML
    (2) H -> . TAG_HEAD T TAG_HEAD

    TAG_HEAD        shift and go to state 4

    H                              shift and go to state 3

state 3

    (1) S -> TAG_HTML H . B TAG_HTML
    (4) B -> . TAG_BODY P

    TAG_BODY        shift and go to state 6

    B                              shift and go to state 5

state 4

    (2) H -> TAG_HEAD . T TAG_HEAD
    (3) T -> . TAG_TITLE L TAG_TITLE

    TAG_TITLE       shift and go to state 8

    T                              shift and go to state 7

state 5

    (1) S -> TAG_HTML H B . TAG_HTML

    TAG_HTML        shift and go to state 9


state 6

    (4) B -> TAG_BODY . P
    (5) P -> . TAG_P L C TAG_HR TAG_P

    TAG_P           shift and go to state 11

    P                              shift and go to state 10

state 7

    (2) H -> TAG_HEAD T . TAG_HEAD

    TAG_HEAD        shift and go to state 12


state 8

    (3) T -> TAG_TITLE . L TAG_TITLE
    (7) L -> . TEXT
    (8) L -> . empty
    (9) empty -> .

    TEXT            shift and go to state 14
    TAG_TITLE       reduce using rule 9 (empty -> .)

    L                              shift and go to state 13
    empty                          shift and go to state 15

state 9

    (1) S -> TAG_HTML H B TAG_HTML .

    $end            reduce using rule 1 (S -> TAG_HTML H B TAG_HTML .)


state 10

    (4) B -> TAG_BODY P .

    TAG_HTML        reduce using rule 4 (B -> TAG_BODY P .)


state 11

    (5) P -> TAG_P . L C TAG_HR TAG_P
    (7) L -> . TEXT
    (8) L -> . empty
    (9) empty -> .

    TEXT            shift and go to state 14
    TAG_B           reduce using rule 9 (empty -> .)

    L                              shift and go to state 16
    empty                          shift and go to state 15

state 12

    (2) H -> TAG_HEAD T TAG_HEAD .

    TAG_BODY        reduce using rule 2 (H -> TAG_HEAD T TAG_HEAD .)


state 13

    (3) T -> TAG_TITLE L . TAG_TITLE

    TAG_TITLE       shift and go to state 17


state 14

    (7) L -> TEXT .

    TAG_TITLE       reduce using rule 7 (L -> TEXT .)
    TAG_B           reduce using rule 7 (L -> TEXT .)


state 15

    (8) L -> empty .

    TAG_TITLE       reduce using rule 8 (L -> empty .)
    TAG_B           reduce using rule 8 (L -> empty .)


state 16

    (5) P -> TAG_P L . C TAG_HR TAG_P
    (6) C -> . TAG_B L TAG_B

    TAG_B           shift and go to state 19

    C                              shift and go to state 18

state 17

    (3) T -> TAG_TITLE L TAG_TITLE .

    TAG_HEAD        reduce using rule 3 (T -> TAG_TITLE L TAG_TITLE .)


state 18

    (5) P -> TAG_P L C . TAG_HR TAG_P

    TAG_HR          shift and go to state 20


state 19

    (6) C -> TAG_B . L TAG_B
    (7) L -> . TEXT
    (8) L -> . empty
    (9) empty -> .

    TEXT            shift and go to state 14
    TAG_B           reduce using rule 9 (empty -> .)

    L                              shift and go to state 21
    empty                          shift and go to state 15

state 20

    (5) P -> TAG_P L C TAG_HR . TAG_P

    TAG_P           shift and go to state 22


state 21

    (6) C -> TAG_B L . TAG_B

    TAG_B           shift and go to state 23


state 22

    (5) P -> TAG_P L C TAG_HR TAG_P .

    TAG_HTML        reduce using rule 5 (P -> TAG_P L C TAG_HR TAG_P .)


state 23

    (6) C -> TAG_B L TAG_B .

    TAG_HR          reduce using rule 6 (C -> TAG_B L TAG_B .)

